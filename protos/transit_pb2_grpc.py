# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protos.transit_pb2 as transit__pb2


class SocketManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.new = channel.unary_unary(
                '/pyxy.SocketManager/new',
                request_serializer=transit__pb2.SocketReq.SerializeToString,
                response_deserializer=transit__pb2.SocketResp.FromString,
                )
        self.close = channel.unary_unary(
                '/pyxy.SocketManager/close',
                request_serializer=transit__pb2.SocketReq.SerializeToString,
                response_deserializer=transit__pb2.SocketResp.FromString,
                )
        self.send = channel.stream_unary(
                '/pyxy.SocketManager/send',
                request_serializer=transit__pb2.SendReq.SerializeToString,
                response_deserializer=transit__pb2.SendResp.FromString,
                )
        self.read = channel.unary_stream(
                '/pyxy.SocketManager/read',
                request_serializer=transit__pb2.ReadReq.SerializeToString,
                response_deserializer=transit__pb2.ReadResp.FromString,
                )


class SocketManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def new(self, request, context):
        """新建连接
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def close(self, request, context):
        """关闭连接
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send(self, request_iterator, context):
        """客户端发送字节数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read(self, request, context):
        """客户端接受字节数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SocketManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'new': grpc.unary_unary_rpc_method_handler(
                    servicer.new,
                    request_deserializer=transit__pb2.SocketReq.FromString,
                    response_serializer=transit__pb2.SocketResp.SerializeToString,
            ),
            'close': grpc.unary_unary_rpc_method_handler(
                    servicer.close,
                    request_deserializer=transit__pb2.SocketReq.FromString,
                    response_serializer=transit__pb2.SocketResp.SerializeToString,
            ),
            'send': grpc.stream_unary_rpc_method_handler(
                    servicer.send,
                    request_deserializer=transit__pb2.SendReq.FromString,
                    response_serializer=transit__pb2.SendResp.SerializeToString,
            ),
            'read': grpc.unary_stream_rpc_method_handler(
                    servicer.read,
                    request_deserializer=transit__pb2.ReadReq.FromString,
                    response_serializer=transit__pb2.ReadResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pyxy.SocketManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SocketManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def new(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pyxy.SocketManager/new',
            transit__pb2.SocketReq.SerializeToString,
            transit__pb2.SocketResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pyxy.SocketManager/close',
            transit__pb2.SocketReq.SerializeToString,
            transit__pb2.SocketResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/pyxy.SocketManager/send',
            transit__pb2.SendReq.SerializeToString,
            transit__pb2.SendResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pyxy.SocketManager/read',
            transit__pb2.ReadReq.SerializeToString,
            transit__pb2.ReadResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
